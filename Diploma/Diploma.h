#pragma once

class Diploma
{
public:
    long double Temperature;

    virtual long double* Add(long double*, long double*, int); // сложение векторов
    virtual long double* Mult(long double, long double*, int); // умножение скаляра на вектор

    virtual long double** Add(long double**, long double**, int); // сложение матриц
    virtual long double** Mult(long double**, long double**, int); // умножение матрицы на матрицу
    virtual long double** Mult(long double, long double**, int); // умножение скаляра на матрицу
    virtual long double* Mult(long double**, long double*, int); // умножение матрицы на вектор

    virtual long double** CGInversion(long double**, int); // вычисление обратной матрицы
    virtual long double** GInversion(long double**); // вычисление обратной матрицы методом Гаусса
    virtual long double** LUInversion(long double**); // вычисление обратной матрицы с помощью LU разложения

    virtual long double* f(long double*, int); // правая часть системы дифференциальных уравнений
    virtual long double** Jacobian(long double*, int); // матрица якоби
    virtual long double** Ar(long double, int); // линейная часть
    virtual long double* P(long double*, int); // вектор возмущения
    virtual long double** Y(long double, int); // фундаментальная матрица
    virtual long double* LpTransformation(); // ляпуновское преобразование


    virtual long double norm(long double*, long double*, int); // подсчет расстояния между векторами

    virtual void CalcCoefs(); // вычисление коэффициентов скростей реакций

    virtual void mkMethod(long double, long double, long double);
    virtual void EuMethod(long double, long double, long double);

    ~Diploma();
protected:


};
